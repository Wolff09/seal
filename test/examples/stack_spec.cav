/******************************************************************************/
/*   __               ___     CAVE: Concurrent Algorithm VErifier             */
/*  /     /\  \    / |        Copyright (c) Viktor Vafeiadis                  */
/* |     /--\  \  /  |---                                                     */
/*  \__ /    \  \/   |___     See https://people.mpi-sws.org/~viktor/cave/    */
/*                                                                            */
/******************************************************************************/

// Concurrent stack specification

extern int EMPTY;
class ListPtr { list val; }
ListPtr ABS;

// -----------------------------------------------------------------------------
// Constructor
// -----------------------------------------------------------------------------

void init_ABS () 
  ensures ABS|->val:@list()
{
  ABS = new();
  ABS->val = @list();
}

// -----------------------------------------------------------------------------
// Push one element onto the stack (non-blocking)
// -----------------------------------------------------------------------------

void ABS_push(int e)
{
  ABS->val = @list(@item(e),ABS->val);
}

// -----------------------------------------------------------------------------
// Push many elements onto the stack (non-blocking)
// -----------------------------------------------------------------------------

void ABS_push_many(list l)
{
  ABS->val = @list(l,ABS->val);
}

// -----------------------------------------------------------------------------
// Pop one element off the list (non-blocking)
// -----------------------------------------------------------------------------

int ABS_pop()
{
  int abs_res;
  if (ABS->val == @list()) { return EMPTY; }
  else { 
    abs_res = @hd(ABS->val); 
    ABS->val = @tl(ABS->val);
    return abs_res;
  }
}

// -----------------------------------------------------------------------------
// Pop one element off the list (blocking)
// -----------------------------------------------------------------------------

int ABS_pop_wait()
{
  int abs_res;
  assume (ABS->val != @list());
  abs_res = @hd(ABS->val);
  ABS->val = @tl(ABS->val);
  return abs_res;
}

// -----------------------------------------------------------------------------
// Pop all elements off the list (non-blocking)
// -----------------------------------------------------------------------------

list ABS_pop_all()
{
  list abs_res;
  abs_res = ABS->val;
  ABS->val = @list();
  return abs_res;
}

// -----------------------------------------------------------------------------
// Return first element of the stack if any
// -----------------------------------------------------------------------------

int ABS_peek()
{
  if (ABS->val == @list()) { return EMPTY; }
  else { 
    return @hd(ABS->val); 
  }
}

// -----------------------------------------------------------------------------
// Make the stack empty (non-blocking)
// -----------------------------------------------------------------------------

void ABS_empty()
{
  ABS->val = @list();
}

// -----------------------------------------------------------------------------
// Wait until the stack is empty (blocking)
// -----------------------------------------------------------------------------

void ABS_wait_until_empty()
{
  assume (ABS->val == @list());
}

// -----------------------------------------------------------------------------
// Get a snapshot of the stack (non-blocking)
// -----------------------------------------------------------------------------

list ABS_snapshot()
{
  return ABS->val;
}

// -----------------------------------------------------------------------------
// Is the stack empty? (non-blocking)
// -----------------------------------------------------------------------------

bool ABS_is_empty()
{
  if (ABS->val == @list()) 
    return true;
  else
    return false;
}

