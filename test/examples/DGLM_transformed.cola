#name "DGLM Queue, manually transformed"
#cavespec "queue_spec.cav"
#cave 'prover_opts imp_var = "CC_.Tail.next";'
#instrumentation "container"

struct Node {
	data_t val;
	Node* next;
}

Node* Tail;
Node* Head;

extern void retire(Node* ptr);
extern void protect1(Node* ptr);
extern void protect2(Node* ptr);


void init() {
	Head = malloc;
	Head->next = NULL;
	Tail = Head;
}

void enqueue(data_t value) {
	Node* tail, next, node;

	node = malloc;
	node->val = value;
	node->next = NULL;

	while (true) {
		tail = Tail;
		protect1(tail);

		choose {
			atomic {
				// assume(tail == Tail);
				tail = Tail; // atomicity abstraction
				protect1(tail); // atomicity abstraction
				assert(active(tail)); // inferred
			}
			next = tail->next;

			choose {
				atomic {
					assert(active(Tail)); // inferred
					assume(tail == Tail);
				}
				if (next != NULL) {
					atomic {
						assert(active(Tail)); // inferred
						CAS(Tail, tail, next);
					}

				} else {
					if (CAS(tail->next, NULL, node)) {
						atomic {
							assert(active(Tail)); // inferred
							CAS(Tail, tail, node);
						}
						break;
					}
				}
			}{
				skip;
			}
		}{
			skip;
		}
	}
}

data_t dequeue() {
	Node* head, next, tail;
	data_t result;
	bool flag;
	bool tmp;

	while (true) {
		head = Head;
		protect1(head);

		choose {
			atomic {
				// assume(head == Head);
				head = Head; // atomicity abstraction
				protect1(head); // atomicity abstraction
				assert(active(head)); // inferred
			}
			next = head->next;
			protect2(next);

			choose {
				atomic {
					assert(active(Head)); // inferred
					assume(head == Head);
					assert(active(next)); // inferred
				}
				if (next == NULL) {
					result = EMPTY;
					break;

				} else {
					result = next->val;

					atomic {
						assert(active(Head)); // inferred
						if (CAS(Head, head, next)) {
							flag = true;
						} else {
							flag = false;
						}
					}

					if (flag) {
						choose {
							atomic {
								tail = Tail;
								assert(active(tail));
								assume(head == tail);
							}
							atomic {
								assert(active(Tail)); // inferred
								CAS(Tail, tail, next);
							}
						}{
							tail = Tail;
							assume(head != tail);
						}

						atomic {
							assert(active(head));
							retire(head);
						}
						break;
					}
				}
			}{
				skip;
			}
		}{
			skip;
		}
	}
	return result;
}
