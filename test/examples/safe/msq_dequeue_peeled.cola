
struct Node {
	data_t data;
	Node* next;
}

Node* Head, Tail;

extern void retire(Node* ptr);
extern void protect1(Node* ptr);
extern void protect2(Node* ptr);

void init() {
	Head = malloc;
	Head->next = NULL;
	Tail = Head;
}

void dequeue() {
	Node* head, next, tail, tmp;
	data_t result;
	loop {
		choose {
			atomic {
				assert(active(Head));
				head = Head;
				protect1(head);
				assume(head == Head);
			}
			choose {
				atomic {
					tail = Tail;
					assert(active(tail));
					assume(head == tail);
				}
				atomic {
					next = head->next;
				}
				atomic {
					protect2(next);
				}
				choose {
					atomic {
						assume(head != Head);
					}
				}{
					atomic {
						assert(active(Head));
						assume(head == Head);
						assert(active(next));
					}
					atomic {
						assume(next != NULL);
					}
					choose {
						atomic {
							assert(active(Tail));
							assume(tail == Tail);
							Tail = next;
						}
					}{
						atomic {
							assume(tail != Tail);
						}
					}
				}
			}{
				atomic {
					tail = Tail;
					assume(head != tail);
				}
				atomic {
					next = head->next;
				}
				atomic {
					protect2(next);
				}
				choose {
					atomic {
						assume(head != Head);
					}
				}{
					atomic {
						assert(active(Head));
						assume(head == Head);
						assert(active(next));
					}
					atomic {
						assume(next != NULL);
					}
					atomic {
						result = next->data;
					}
					atomic {
						assume(head != Head);
					}
				}
			}
		}{
			atomic {
				head = Head;
			}
			atomic {
				protect1(head);
			}
			atomic {
				assume(head != Head);
			}
		}
	}
	atomic {
		assert(active(Head));
		head = Head;
		protect1(head);
		assume(head == Head);
	}
	choose {
		atomic {
			tail = Tail;
			assert(active(tail));
			assume(head == tail);
		}
		atomic {
			next = head->next;
		}
		atomic {
			protect2(next);
		}
		atomic {
			assert(active(Head));
			assume(head == Head);
			assert(active(next));
		}
		atomic {
			assume(next == NULL);
		}
		atomic {
			result = EMPTY;
		}
	}{
		atomic {
			tail = Tail;
			assume(head != tail);
		}
		atomic {
			next = head->next;
		}
		atomic {
			protect2(next);
		}
		atomic {
			assert(active(Head));
			assume(head == Head);
			assert(active(next));
		}
		choose {
			atomic {
				assume(next == NULL);
			}
			atomic {
				result = EMPTY;
			}
		}{
			atomic {
				assume(next != NULL);
			}
			atomic {
				result = next->data;
			}
			atomic {
				assert(active(Head));
				assume(head == Head);
				Head = next;
			}
			atomic {
				assert(active(head));
				retire(head);
			}
		}
	}
}
