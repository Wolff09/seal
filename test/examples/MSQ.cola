#name "Michael&Scott's Queue"
#cavespec "queue_spec.cav"
#cavelin 'prover_opts imp_var = "CC_.Tail.next";'

struct Node {
	data_t val;
	Node* next;
}

Node* Tail;
Node* Head;

extern void retire(Node* ptr);
extern void protect1(Node* ptr);
extern void protect2(Node* ptr);

void init() {
	Head = malloc;
	Head->next = NULL;
	Tail = Head;
}

void enqueue(data_t value) {
	Node* tail, next, node, tmp;
	bool b1;

	node = malloc;
	node->val = value;
	node->next = NULL;

	while (true) {
		tail = Tail;
		protect1(tail);

		if (tail == Tail) {
			next = tail->next;

			if (tail == Tail) {
				if (next != NULL) {
					CAS(Tail, tail, next);

				} else {
					if (CAS(tail->next, NULL, node)) {
						CAS(Tail, tail, node);
						break;
					}
				}
			}
		}
	}
}

data_t dequeue() {
	Node* head, next, tail, tmp;
	data_t result;

	while (true) {
		head = Head;
		protect1(head);

		if (head == Head) {
			tail = Tail;
			next = head->next;
			protect2(next);

			if (head == Head) {
				if (next == NULL) {
					result = EMPTY;
					break;

				} else {
					if (head == tail) {
						CAS(Tail, tail, next);

					} else {
						result = next->val;
						atomic {
							if (CAS(Head, head, next)) {
								retire(head); // move left to avoid CAVE imprecision
								break;
							}
						}
					}
				}
			}
		}
	}
	return result;
}
