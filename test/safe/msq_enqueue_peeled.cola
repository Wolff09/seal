
struct Node {
	data_t data;
	Node* next;
}

Node* Head, Tail;

extern void retire(Node* ptr);
extern void protect1(Node* ptr);
extern void protect2(Node* ptr);

void init() {
	Head = malloc;
	Head->next = NULL;
}

void enqueue(data_t input) {
	Node* tail, next, node, tmp;
	atomic {
		node = malloc;
	}
	atomic {
		node->data = input;
	}
	atomic {
		node->next = NULL;
	}
	loop {
		choose {
			atomic {
				assert(active(Tail));
				tail = Tail;
				protect1(tail);
				assume(tail == Tail);
			}
			atomic {
				next = tail->next;
			}
			choose {
				atomic {
					assume(tail != Tail);
				}
			}{
				atomic {
					assert(active(Tail));
					assume(tail == Tail);
					assert(active(next));
				}
				choose {
					atomic {
						assume(next != NULL);
					}
					choose {
						atomic {
							assert(active(Tail));
							assume(tail == Tail);
							Tail = next;
						}
					}{
						atomic {
							assume(tail != Tail);
						}
					}
				}{
					atomic {
						assert(active(next));
						assume(next == NULL);
					}
					atomic {
						tmp = tail->next;
					}
					atomic {
						assume(tmp != next);
					}
				}
			}
		}{
			atomic {
				tail = Tail;
			}
			atomic {
				protect1(tail);
			}
			atomic {
				assume(tail != Tail);
			}
		}
	}
	atomic {
		assert(active(Tail));
		tail = Tail;
		protect1(tail);
		assume(tail == Tail);
	}
	atomic {
		next = tail->next;
	}
	atomic {
		assert(active(Tail));
		assume(tail == Tail);
		assert(active(next));
	}
	atomic {
		assert(active(next));
		assume(next == NULL);
	}
	atomic {
		tmp = tail->next;
		assert(active(next));
		assert(tmp == next);
		assume(tmp == next);
		tail->next = node;
	}
	choose {
		atomic {
			assert(active(Tail));
			assert(active(tail));
			assume(tail == Tail);
			Tail = node;
		}
	}{
		atomic {
			assume(tail != Tail);
		}
	}
}
