#name "Michael&Scott's Queue"
#cavespec "queue_spec.cav"
#cave 'prover_opts imp_var = "CC_.Tail.next";'
#instrumentation "container"

struct Node {
	data_t val;
	Node* next;
}

Node* Tail;
Node* Head;

extern void retire(Node* ptr);
extern void enterQ();
extern void leaveQ();

void init() {
	Head = malloc;
	Head->next = NULL;
	Tail = Head;
}

void enqueue(data_t value) {
	Node* tail, next, node;

	atomic {
		angel(choose active);
		leaveQ();
	}

	node = malloc;
	node->val = value;
	node->next = NULL;

	while (true) {
		tail = Tail;
		angel(contains(tail));

		choose {
			atomic {
				assert(active(Tail));
				assume(tail == Tail);
			}
			next = tail->next;

			choose {
				atomic {
					assert(active(Tail));
					assume(tail == Tail);
				}
				if (next != NULL) {
					atomic {
						assert(active(Tail));
						CAS(Tail, tail, next);
					}

				} else {
					if (CAS(tail->next, NULL, node)) {
						atomic {
							assert(active(Tail));
							CAS(Tail, tail, node);
						}
						break;
					}
				}
			}{
				skip;
			}
		}{
			skip;
		}
	}

	enterQ();
}

data_t dequeue() {
	Node* head, next, tail;
	data_t result;
	bool flag;

	atomic {
		angel(choose active);
		leaveQ();
	}

	while (true) {
		head = Head;
		angel(contains(head));
		tail = Tail;
		angel(contains(tail));
		next = head->next;
		angel(contains(next));

		choose {
			atomic {
				assert(active(Head));
				assume(head == Head);
			}
			if (next == NULL) {
				result = EMPTY;
				break;

			} else {
				if (head == tail) {
					atomic {
						assert(active(Tail));
						CAS(Tail, tail, next);
					}

				} else {
					result = next->val;
					atomic {
						assert(active(Head));
						if (CAS(Head, head, next)) {
							retire(head); // moved left to avoid CAVE imprecision
							flag = true;
						} else {
							flag = false;
						}
					}
					if (flag) {
						// retire(head);
						break;
					}
				}
			}
		}{
			assume(head != Head);
		}
	}

	enterQ();
	return result;
}
