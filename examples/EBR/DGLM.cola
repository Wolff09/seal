#name "DGLM Queue EBR"
#smr "EBR"
#cavespec "../queue_spec.cav"
#cavelin 'prover_opts imp_var = "CC_.Tail.next";'
#instrumentation "container"

struct Node {
	data_t val;
	Node* next;
}

Node* Tail;
Node* Head;

extern void retire(Node* ptr);
extern void enterQ();
extern void leaveQ();


void init() {
	Head = malloc;
	Head->next = NULL;
	Tail = Head;
}

void enqueue(data_t value) {
	Node* tail, next, node;

	node = malloc;
	node->val = value;
	node->next = NULL;

	atomic {
		angel(choose active);
		leaveQ();
	}

	while (true) {
		tail = Tail;
		angel(member(tail));
		next = tail->next;
		angel(member(next));

		if (tail == Tail) {
			if (next != NULL) {
				CAS(Tail, tail, next);

			} else {
				if (CAS(tail->next, NULL, node)) {
					CAS(Tail, tail, node);
					break;
				}
			}
		}
	}

	enterQ();
}

data_t dequeue() {
	Node* head, next, tail;
	data_t result;
	bool flag;

	atomic {
		angel(choose active);
		leaveQ();
	}

	while (true) {
		head = Head;
		angel(member(head));
		next = head->next;
		angel(member(next));

		if (head == Head) {
			if (next == NULL) {
				result = EMPTY;
				break;

			} else {
				result = next->val;
				atomic {
					if (CAS(Head, head, next)) {
						flag = true;
					} else {
						flag = false;
					}
				}
				if (flag) {
					choose {
						tail = Tail;
						angel(member(tail));
						assume(head == tail);
						CAS(Tail, tail, next);
					}{
						tail = Tail;
						assume(head != tail);
					}
					atomic {
						assert(active(head));
						retire(head);
					}
					break;
				}
			}
		}
	}

	enterQ();
	return result;
}
