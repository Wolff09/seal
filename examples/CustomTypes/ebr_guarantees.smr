observer EBR_NonQuiescent [positive] {
	
    variables:
        thread T;
        pointer P;  

    states:
    	s0(Base0-EBR_init)[initial];
    	s1(Base0-EBR_protected)[final];
    	s2(Base1-EBR_init);
    	s3(Base1-EBR_protected)[final];
    	s4(Base1-EBR_retired)[final];
    	s5(Final)[final];

    transitions:
    	s0 -- exit leaveQ(T) >> s1;
    	s2 -- exit leaveQ(T) >> s3;
    	s1 -- enter retire(*, P) >> s4;
    	s3 -- enter retire(*, P) >> s4;
    	s0 -- enter retire(*, P) >> s2;
    	s2 -- free(*, P) >> s0;
    	s3 -- free(*, P) >> s1;
    	s4 -- free(*, P) >> s5;
    	s1 -- enter enterQ(T) >> s0;
    	s3 -- enter enterQ(T) >> s2;
    	s4 -- enter enterQ(T) >> s2;
}

observer EBR_Protected [positive] {
	
    variables:
        thread T;
        pointer P;  

    states:
    	s0(Base0-EBR_init)[initial];
    	s1(Base0-EBR_protected)[final];
    	s2(Base1-EBR_init);
    	s3(Base1-EBR_protected);
    	s4(Base1-EBR_retired)[final];
    	s5(Final)[final];

    transitions:
    	s0 -- exit leaveQ(T) >> s1;
    	s2 -- exit leaveQ(T) >> s3;
    	s1 -- enter retire(*, P) >> s4;
    	s3 -- enter retire(*, P) >> s4;
    	s0 -- enter retire(*, P) >> s2;
    	s2 -- free(*, P) >> s0;
    	s3 -- free(*, P) >> s1;
    	s4 -- free(*, P) >> s5;
    	s1 -- enter enterQ(T) >> s0;
    	s3 -- enter enterQ(T) >> s2;
    	s4 -- enter enterQ(T) >> s2;
}
