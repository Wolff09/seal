
/*********************************************************/
/************************** HP 1 *************************/
/*********************************************************/

observer HP1_Entered [positive] {

    variables:
        thread T;
        pointer P;  

    states:
        s1(HP1_init)[initial];
        s2(HP1_invoked)[final];
        s3(HP1_protected)[final];
        s4(HP1_retired)[final];
        s5(HP1_fail)[final];

    transitions:
        s1 -- enter protect1(T, P) >> s2;
        s2 -- exit protect1(T) >> s3;
        s3 -- enter retire(*, P) >> s4;
        s4 -- free(*, P) >> s5;

        s2 -- enter protect1(T, !P) >> s1;
        s3 -- enter protect1(T, !P) >> s1;
        s4 -- enter protect1(T, !P) >> s1;

}

observer HP1_Exited [positive] {

    variables:
        thread T;
        pointer P;  

    states:
        s1(HP1_init)[initial];
        s2(HP1_invoked);
        s3(HP1_protected)[final];
        s4(HP1_retired)[final];
        s5(HP1_fail)[final];

    transitions:
        s1 -- enter protect1(T, P) >> s2;
        s2 -- exit protect1(T) >> s3;
        s3 -- enter retire(*, P) >> s4;
        s4 -- free(*, P) >> s5;

        s2 -- enter protect1(T, !P) >> s1;
        s3 -- enter protect1(T, !P) >> s1;
        s4 -- enter protect1(T, !P) >> s1;

}

observer HP1_Protection [positive] {

    variables:
        thread T;
        pointer P;

    states:
        s0(Final)[final];
        s1(Base0-HP1_init)[initial];
        s2(Base1-HP1_init);
        s3(Base0-HP1_invoked);
        s4(Base1-HP1_invoked);
        s5(Base0-HP1_protected)[final];
        s6(Base1-HP1_retired)[final];
        s7(Base1-HP1_protected);

    transitions:
        s1 -- enter retire(*, P) >> s2;
        s1 -- enter protect1(T, P) >> s3;
        s1 -- free(*, P) >> s0;
        s3 -- enter retire(*, P) >> s4;
        s3 -- enter protect1(T, !P) >> s1;
        s3 -- exit protect1(T) >> s5;
        s3 -- free(*, P) >> s0;
        s2 -- enter protect1(T, P) >> s4;
        s2 -- free(*, P) >> s1;
        s5 -- enter retire(*, P) >> s6;
        s5 -- enter protect1(T, !P) >> s1;
        s5 -- free(*, P) >> s0;
        s4 -- enter protect1(T, !P) >> s2;
        s4 -- exit protect1(T) >> s7;
        s4 -- free(*, P) >> s3;
        s6 -- enter protect1(T, !P) >> s2;
        s6 -- free(*, P) >> s0;
        s7 -- enter retire(*, P) >> s6;
        s7 -- enter protect1(T, !P) >> s2;
        s7 -- free(*, P) >> s5;
}


/*********************************************************/
/************************** HP 2 *************************/
/*********************************************************/

observer HP2_Entered [positive] {

    variables:
        thread T;
        pointer P;  

    states:
        s1(HP2_init)[initial];
        s2(HP2_invoked)[final];
        s3(HP2_protected)[final];
        s4(HP2_retired)[final];
        s5(HP2_fail)[final];

    transitions:
        s1 -- enter protect2(T, P) >> s2;
        s2 -- exit protect2(T) >> s3;
        s3 -- enter retire(*, P) >> s4;
        s4 -- free(*, P) >> s5;

        s2 -- enter protect2(T, !P) >> s1;
        s3 -- enter protect2(T, !P) >> s1;
        s4 -- enter protect2(T, !P) >> s1;

}

observer HP2_Exited [positive] {

    variables:
        thread T;
        pointer P;  

    states:
        s1(HP2_init)[initial];
        s2(HP2_invoked);
        s3(HP2_protected)[final];
        s4(HP2_retired)[final];
        s5(HP2_fail)[final];

    transitions:
        s1 -- enter protect2(T, P) >> s2;
        s2 -- exit protect2(T) >> s3;
        s3 -- enter retire(*, P) >> s4;
        s4 -- free(*, P) >> s5;

        s2 -- enter protect2(T, !P) >> s1;
        s3 -- enter protect2(T, !P) >> s1;
        s4 -- enter protect2(T, !P) >> s1;

}

observer HP2_Protection [positive] {

    variables:
        thread T;
        pointer P;

    states:
        s0(Final)[final];
        s1(Base0-HP2_init)[initial];
        s2(Base1-HP2_init);
        s3(Base0-HP2_invoked);
        s4(Base1-HP2_invoked);
        s5(Base0-HP2_protected)[final];
        s6(Base1-HP2_retired)[final];
        s7(Base1-HP2_protected);

    transitions:
        s1 -- enter retire(*, P) >> s2;
        s1 -- enter protect2(T, P) >> s3;
        s1 -- free(*, P) >> s0;
        s3 -- enter retire(*, P) >> s4;
        s3 -- enter protect2(T, !P) >> s1;
        s3 -- exit protect2(T) >> s5;
        s3 -- free(*, P) >> s0;
        s2 -- enter protect2(T, P) >> s4;
        s2 -- free(*, P) >> s1;
        s5 -- enter retire(*, P) >> s6;
        s5 -- enter protect2(T, !P) >> s1;
        s5 -- free(*, P) >> s0;
        s4 -- enter protect2(T, !P) >> s2;
        s4 -- exit protect2(T) >> s7;
        s4 -- free(*, P) >> s3;
        s6 -- enter protect2(T, !P) >> s2;
        s6 -- free(*, P) >> s0;
        s7 -- enter retire(*, P) >> s6;
        s7 -- enter protect2(T, !P) >> s2;
        s7 -- free(*, P) >> s5;
}
