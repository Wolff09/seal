#name "Michael's Set, simplified and manually transformed"
#cavespec "set_spec.cav"
#cave 'prover_opts imp_var = "CC_.Head.next";'
#cavebound "key"
#instrumentation "container"


struct Node {
	data_t val;
	bool marked;
	Node* next;
}

Node* Head;

extern void retire(Node* ptr);
extern void protect1(Node* ptr);
extern void protect2(Node* ptr);
extern void protect3(Node* ptr);


void init() {
	Head = malloc;
	Head->next = NULL;
	Head->marked = false;
}


inline void locate(Node* pred, Node* curr, Node* next, data_t key, data_t k, data_t k3) {
	// k3: CAVE hack for necessary precision

	curr = Head;
	k = MIN_VAL;
	k3 = MIN_VAL;
	atomic {
		// protection needed for type check to go through
		// alternatively one could peel the first loop iteration
		protect2(curr);
		assert(active(curr));
	}

	while (true) { // do while (k < key)
		pred = curr;
		k3 = k;
		protect1(pred);

		curr = pred->next;
		protect2(curr);

		choose {
			atomic {
				assume(pred->marked == false);
				// assume(curr == pred->next);
				curr = pred->next; // atomicity abstraction
                protect2(curr); // atomicity abstraction
                assert(active(pred->next)); // preprocessing
                assert(active(curr)); // inferred
                k3 = k3;
			}

			if (curr == NULL) {
				k = MAX_VAL;
				break;
			} else {
				k = curr->val;
			}
		}{
			// retry
			curr = Head;
			k = MIN_VAL;
			k3 = MIN_VAL;
			atomic {
				// protection for type check (as before)
				protect2(curr);
				assert(active(curr));
			}
		}

		if (curr->marked == false) {
			if (k >= key) {
				break;
			}
		} else {
			next = curr->next;
			atomic {
				assume(pred->marked == false);
				assume(curr == pred->next);
				pred->next = next;
				assert(active(curr)); // inferred
				retire(curr);
				k3 = k3;
			}

			// retry
			curr = Head;
			k = MIN_VAL;
			k3 = MIN_VAL;
			atomic {
				// protection for type check (as before)
				protect2(curr);
				assert(active(curr));
			}
		}
	}
}


bool contains(data_t key) {
	Node* pred, curr, next;
	data_t k, k3;
	bool result;

	locate(pred, curr, next, key, k, k3);

	if (k == key) {
		result = true;
	} else {
		result = false;
	}

	return result;
}


bool add(data_t key) {
	Node* pred, curr, next, entry;
	data_t k, k3;
	bool result;

	while (true) {
		locate(pred, curr, next, key, k, k3);

		if (k == key) {
			result = false;
			break;

		} else {
			// allocate here since retire in locate fools the type system into believing that entry could be retired
			entry = malloc;
			entry->val = key;
			entry->marked = false;

			entry->next = curr;
			atomic {
				choose {
					assume(pred->marked == false);
					assume(curr == pred->next);

					pred->next = entry;
					k3 = k;
					result = true;
					break;
				}{
					retire(entry); // reclaim new node that was not added to the data structure
					skip; // retry
				}
			}
		}
	}

	return result;
}

bool remove(data_t key) {
	Node* pred, curr, next;
	data_t k, k3;
	bool result;

	while (true) {
		locate(pred, curr, next, key, k, k3);

		if (k > key) {
			result = false;
			break;

		} else {
			next = curr->next;
			choose {
				// atomic {
				// 	assume(curr->marked == false);
				// 	assume(next == curr->next);
				// 	curr->marked = true;
				// }
				// atomic {
				// 	assume(pred->marked == false);
				// 	assume(curr == pred->next);
				// 	pred->next = next;
				// 	retire(curr);
				// }
				atomic {
					assume(curr->marked == false);
					// assume(next == curr->next);
					next = curr->next; // atomicity abstraction
					assert(active(curr->next)); //preprocessing
					curr->marked = true;
					k3 = k3;
				}
				atomic {
					assume(pred->marked == false);
					assume(curr == pred->next);
					pred->next = next;
					assert(active(curr)); // inferred
					retire(curr);
					k3 = k3;
				}
				result = true;
				break;
			}{
				skip; // retry
			}
		}
	}

	return result;
}
